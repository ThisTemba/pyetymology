class Entries:

    def __init__(self, headers: List[Header], is_multi_ety=False, did_pos=False, did_ety=False):
        assert len(headers) >= 1
        entries = []
        if is_multi_ety:  # multiple etymologies, so defns are children and l4
            assert len(headers) > 1
            for header in headers:
                assert header.idx is not None
                assert header.header_type == "Etymology"
                ety = header
                extras = []  # type: List[Header]
                for lvl4plus in wikt.sections_by_level(header.subordinates, 4):
                    lvl4 = lvl4plus[0]
                    is_defn = poscodes.is_defn(lvl4)

                    breve: str = lvl4[4:]  # len("===") == 3 # "===Pronunciation===" --> "Pronunciation===" # TODO: Code Repetition
                    header = breve[:breve.index("====")]  # "Pronunciation===" -> "Pronunciation" # TODO: Repetition
                    hdr = Header(lvl4, lvl4plus[1:], header_type=header, metainfo="Definition" if is_defn else None,
                                 lvl=4)
                    extras.append(hdr)

                entry = Entry(ety, extras)
                entries.append(entry)

        else:  # single etymology, so defns are siblings and l3
            defns = []  # type: List[Header]
            extras = []
            ety = None
            first = headers[0]  # type: Header
            if first.header_type == "Etymology":
                ety = first
            else:
                assert poscodes.is_defn(first.wikicode) == (
                            first.metainfo == "Definition")  # whether it's a poscode should already be encoded
                extras.append(first)
            for header in headers[1:]:
                assert header.idx is None
                assert header.header_type != "Etymology"
                # assert not header.subordinates
                # it's possible to have subordinates
                assert poscodes.is_defn(first.wikicode) == (
                            first.metainfo == "Definition")  # whether it's a poscode should already be encoded
                extras.append(header)
            entry = Entry(ety, extras)
            entries = [entry]
        self.entrylist = entries
        self.is_multi_ety = is_multi_ety
        self.did_pos = did_pos
        self.did_ety = did_ety
        assert self.is_multi_ety is None or self.is_multi_ety == (len(entries) > 1)

    def by_defn_id(self, index) -> Entry:
        return self.entrylist[index - 1]


def lex(dom: List[Wikicode]) -> Entries:
    sections = wikt.sections_by_level(dom, 3)
    is_multi_ety = None
    headers = []
    did_lemma = False
    for lvl3plus in sections:

        lvl3 = lvl3plus[0]
        if lvl3.startswith("===Etymology"):
            assert did_lemma is False  # Etymology should ALWAYS come before lemmas

            if lvl3.startswith("===Etymology==="):
                assert is_multi_ety is None  # There Should be Exactly one ety
                is_multi_ety = False
                assert headers == []
                h = Header(lvl3, lvl3plus[1:], header_type="Etymology")
                headers.append(h)
            else:  #
                assert is_multi_ety is not False
                assert is_multi_ety in [None, True]
                is_multi_ety = True
                breve: str = lvl3[13:]  # len("===Etymology ") == 13 # "===Etymology 1===" --> "1==="
                ety_idx = breve[:breve.index("===")]  # "1===" -> "1"
                idx = int(ety_idx)
                assert idx and type(idx) == int  # assert that it's an int
                h = Header(lvl3, lvl3plus[1:], header_type="Etymology", idx=idx)
                headers.append(h)

        else:

            # Something other than an Etymology or a POS
            breve: str = lvl3[3:]  # len("===") == 3 # "===Pronunciation===" --> "Pronunciation==="
            header = breve[:breve.index("===")]  # "Pronunciation===" -> "Pronunciation"

            defn_flag = poscodes.is_defn(lvl3)
            if defn_flag:
                assert not is_multi_ety  # if there's multiple etymologies, then the verbs SHOULD have been put in a nested level
                did_lemma = True
                h = Header(lvl3, lvl3plus[1:], header_type=header, metainfo="Definition")
                headers.append(h)
            else:
                h = Header(lvl3, lvl3plus[1:], header_type=header, metainfo="Definition" if defn_flag else None)
                # TODO: Etymology isn't always in the front; Pronunciation sometimes precedes Etymology.

    o_entries = Entries(headers, is_multi_ety=is_multi_ety, did_ety=(is_multi_ety is not None), did_pos=did_lemma)
    return o_entries
